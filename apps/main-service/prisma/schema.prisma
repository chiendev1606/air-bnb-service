// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto, pg_trgm]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  imageUrl     String? @map("image_url")
  avatar    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  properties Property[]
  reservations Reservation[]
  reviews     Review[]
  favorites   Favorite[]
}

model Property {
  id        String   @id @default(uuid())
  name      String
  description String
  price     Int
  imageUrl  String? @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  bedrooms  Int
  baths     Int
  guests    Int
  country   String
  amenities String
  ownerId   String @map("owner_id")
  tagLine   String @map("tag_line")
  owner     User   @relation(fields: [ownerId], references: [id])
  reservations Reservation[]
  reviews     Review[]
  favorites   Favorite[]
}

model Reservation {
  id        String   @id @default(uuid())
  propertyId String @map("property_id")
  property   Property @relation(fields: [propertyId], references: [id])
  userId     String @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  checkIn    DateTime @map("check_in")
  checkOut   DateTime @map("check_out")
  totalPrice Int
  createdAt  DateTime @default(now()) @map("created_at")
}

model Review {
  id        String   @id @default(uuid())
  propertyId String @map("property_id")
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId     String @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating     Int
  comment    String
  createdAt  DateTime @default(now()) @map("created_at")
}

model Favorite {
  id        String   @id @default(uuid())
  propertyId String @map("property_id")
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId     String @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
}